Program([FuncDecl(Id(findMinimum), [VarDecl(Id(num1), NumberType, None, None), VarDecl(Id(num2), NumberType, None, None), VarDecl(Id(num3), NumberType, None, None)], Block([VarDecl(Id(minNumber), None, var, Id(num1)), If((BinaryOp(<, Id(num2), Id(minNumber)), AssignStmt(Id(minNumber), Id(num2))), [], None), If((BinaryOp(<, Id(num3), Id(minNumber)), AssignStmt(Id(minNumber), Id(num3))), [], None), Return(Id(minNumber))])), FuncDecl(Id(main), [], Block([CallStmt(Id(writeString), [StringLit(Enter the first number: )]), VarDecl(Id(input1), None, var, CallExpr(Id(readNumber), [])), CallStmt(Id(writeString), [StringLit(Enter the second number: )]), VarDecl(Id(input2), None, var, CallExpr(Id(readNumber), [])), CallStmt(Id(writeString), [StringLit(Enter the third number: )]), VarDecl(Id(input3), None, var, CallExpr(Id(readNumber), [])), VarDecl(Id(min), None, var, CallExpr(Id(findMinimum), [Id(input1), Id(input2), Id(input3)])), CallStmt(Id(writeString), [StringLit(The minimum number among )]), CallStmt(Id(writeNumber), [Id(input1)]), CallStmt(Id(writeString), [StringLit(, )]), CallStmt(Id(writeNumber), [Id(input2)]), CallStmt(Id(writeString), [StringLit( and )]), CallStmt(Id(writeNumber), [Id(input3)]), CallStmt(Id(writeString), [StringLit( is: )]), CallStmt(Id(writeNumber), [Id(min)])]))])